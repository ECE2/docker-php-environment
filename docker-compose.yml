version: '3'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  adminer:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  graylog:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}

services:

  workspace:
    build:
      context: ./workspace
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_FPM_VERSION=${PHP_VERSION}
        - INSTALL_PHPREDIS=${INSTALL_PHPREDIS}
        - INSTALL_GD=${INSTALL_GD}
        - INSTALL_OPCACHE=${INSTALL_OPCACHE}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./php-worker/supervisord.d:/etc/supervisord.d
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    depends_on:
      - redis
      - mysql
    environment:
      - DOCKER_TLS_VERIFY=1
      - DOCKER_TLS_CERTDIR=/certs
      - DOCKER_CERT_PATH=/certs/client
    networks:
      - backend

  php-fpm:
    build:
      context: ./php-fpm
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_FPM_VERSION=${PHP_VERSION}
        - INSTALL_PHPREDIS=${INSTALL_PHPREDIS}
        - INSTALL_GD=${INSTALL_GD}
        - INSTALL_OPCACHE=${INSTALL_OPCACHE}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ./php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend
    depends_on:
      - workspace

  php-worker:
    build:
      context: ./php-worker
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - ALPINE_PHP_VERSION=${PHP_VERSION}
        - INSTALL_REDIS=${INSTALL_PHPREDIS}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ./php-worker/supervisord.d:/etc/supervisord.d
    depends_on:
      - workspace
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend

  hyperf:
    build:
      context: ./hyperf
    volumes:
      - ${APP_CODE_PATH_HOST}/:${APP_CODE_PATH_CONTAINER}
    ports:
      - "9501:9501"
    depends_on:
      - redis
      - mysql
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
      args:
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - backend

  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      - backend
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis

  adminer:
    build:
      context: ./adminer
      args:
        - INSTALL_MSSQL=${ADM_INSTALL_MSSQL}
    ports:
      - "${ADM_PORT}:8080"
    networks:
      - backend

  graylog:
    build: ./graylog
    environment:
      - GRAYLOG_PASSWORD_SECRET=${GRAYLOG_PASSWORD}
      - GRAYLOG_ROOT_PASSWORD_SHA2=${GRAYLOG_SHA256_PASSWORD}
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:${GRAYLOG_PORT}/
    links:
      - mongo
      - elasticsearch
    depends_on:
      - mongo
      - elasticsearch
    ports:
      - ${GRAYLOG_PORT}:9000
      - ${GRAYLOG_SYSLOG_TCP_PORT}:514
      - ${GRAYLOG_SYSLOG_UDP_PORT}:514/udp
      - ${GRAYLOG_GELF_TCP_PORT}:12201
      - ${GRAYLOG_GELF_UDP_PORT}:12201/udp
    user: graylog
    volumes:
      - ${DATA_PATH_HOST}/graylog:/usr/share/graylog/data
      - ./graylog/config:/usr/share/graylog/data/config
    networks:
      - backend

  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
    environment:
#      - cluster.name=elasticsearch_cluster
#      - node.name=elasticsearch_node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#      - cluster.initial_master_nodes=elasticsearch_node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - backend

  ###  sentry 部分 也会用上面的 redis 和 nginx
#  sentry:
#    build:
#      context: ./sentry
#    links:
#      - redis
#      - postgres
#    ports:
#      - "${SENTRY_PORT}:9000"
#    environment:
#      - SENTRY_SECRET_KEY=${}
#      - SENTRY_POSTGRES_HOST=${SENTRY_POSTGRES_HOST}
#      - SENTRY_DB_USER=${SENTRY_DB_USER}
#      - SENTRY_DB_PASSWORD=${SENTRY_DB_PASSWORD}
#      - SENTRY_REDIS_HOST=${SENTRY_REDIS_HOST}
#    networks:
#      - backend

#  postgres:
#    build:
#      context: ./postgres
#      args:
#        - POSTGRES_VERSION=${POSTGRES_VERSION}
#    volumes:
#      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
#      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
#    ports:
#      - "${POSTGRES_PORT}:5432"
#    environment:
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    networks:
#      - backend
